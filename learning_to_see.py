# -*- coding: utf-8 -*-
"""Learning to see.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XeMhXkikdg6WgWmydz58zq4VQ8HlxdC0
"""

import numpy as np
import sys
# 1. It's ok to import whatever you want from the local util module if you would like:

from util.data_handling import breakIntoGrids, reshapeIntoImage

def count_fingers(im):
    '''
    Example submission for coding challenge. 
    
    Args: im (nxm) unsigned 8-bit grayscale image 
    Returns: One of three integers: 1, 2, 3
    
    '''

    ## ------ Input Pipeline Develped in this Module ----- ##
    # You may use the finger pixel detection pipeline we developed in this module:
    # You may also replace this code with your own pipeline if you prefer
    im = im > 92 #Threshold image
    X = breakIntoGrids(im, s = 9) #Break into 9x9 grids

    # Use rule we learned with decision tree
    treeRule1 = lambda X: np.logical_and(np.logical_and(X[:, 40] == 1, X[:,0] == 0), X[:, 53] == 0)
    yhat = treeRule1(X)

    # Reshape prediction ino image:
    yhat_reshaped = reshapeIntoImage(yhat, im.shape)

    ## ----- Your Code Here ---- ##

    # creating empty array for memoization.
    yhat_array = np.zeros(yhat_reshaped.shape)
    label1,row = 1,1
    while row < yhat_reshaped.shape[0] - 1:
      col = 1
      while col < yhat_reshaped.shape[1] - 1:
        if yhat_reshaped[row][col] == 1:
                # finding the pixels mapped as fingers/blob
                data = yhat_array[(row-4):(row+5), (col-5):(col+4)]
                mapper = map(max, data)
                label = max(mapper)
                if label == 0:
                    yhat_array[row][col] = label1
                    label1 += 1
                else:
                    yhat_array[row][col] = label
        col += 1
      row += 1
    array_size = np.unique(yhat_array)
    blob = 0
    max1=max(array_size)
    for i in range(1, int(max1)+1):
        if (yhat_array==array_size[i]).sum() >25:
            blob+=1
        """
        Skipping when more than 3 blobs are found. ( max 3 fingers only shown 
        in input data). this helps us to reduce the errors when blobs other than
        finger is detected.
        """
        if blob>=3:
            break
    
    return blob
    
    

    ## ----- Get rid of this! ---- ##
    #Let's guess randomly! Maybe we'll get lucky.
    labels = [1, 2, 3]
    random_integer = np.random.randint(low = 0, high = 3)
    
    return labels[random_integer]

# 2. Copy - Paste all the code from this cell into a python file when submitting on Autolab.